# -*- coding: utf-8 -*-
"""Amazon_Sales_Data_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIvg3tsptQFtVAKM0fGTtzIA_dvcL6C6

# **Importing the required libraries needed for the development of the model**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

"""# **Loading the dataset**"""

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Amazon Sales data.csv")

"""# **Displaying the first 10 rows of the dataset**"""

df.head(10)

"""# **Info of the dataset**"""

df.info()

"""# **Description of the dataset**"""

df.describe()

"""# **Countplot of the Sales Channel**"""

sns.countplot(x = 'Sales Channel', data = df)

"""# **Total count of Order Priority**"""

sns.countplot(x = 'Order Priority', data = df)

"""# **Scatterplot of Unit Price and Unit Cost**"""

sns.scatterplot(x = 'Unit Price', y = 'Unit Cost', data = df)

"""# **Scatterplot of total cost and total revenue**"""

sns.scatterplot(x = 'Total Cost', y = 'Total Revenue', data = df)

"""# **Scatterplot of total cost and total cost**"""

sns.scatterplot(x = 'Total Cost', y = 'Total Profit', data = df)

"""# **Total revenue generated**"""

print("Total revenue generated: ", df['Total Revenue'].sum())

"""# **Total Cost**"""

print("Total Cost: ", df['Total Cost'].sum())

"""# **Total Profit generated**"""

print("Total profit generated: ", df['Total Profit'].sum())

"""# **Maximum profit**"""

print("Max profit:", df['Total Profit'].max())

"""# **Minimum Profit**"""

print("Minimum profit:", df['Total Profit'].min())

"""# **Profit Margin**"""

df['Profit Margin'] = (df['Total Profit']/df['Total Revenue'])*100

"""# **Profit margin added to the dataset**"""

df.head(10)

"""# **Averge Revenue per unit**"""

df['Average Revenue per Unit'] = df['Total Revenue']/df['Units Sold']

"""# **Averge Revenue per unit column added to the dataset**"""

df.head(10)

"""# **Countplot between Item type and Order Priority**"""

plt.figure(figsize = (20,10))
sns.countplot(x = 'Item Type', data = df, hue = 'Order Priority')

"""# **Barplot between Region and Total Revenue**"""

plt.figure(figsize = (19,10))
sns.barplot(x = 'Region', y = 'Total Revenue', data = df)

"""# **Barplot between Region and Total Profit**"""

plt.figure(figsize = (19,10))
sns.boxplot(x = 'Region', y = 'Total Profit', data = df)

"""# **Value count in the sales channel**"""

df['Sales Channel'].value_counts()

"""# **Value count of the region**"""

df['Region'].value_counts()

"""# **Value count in Country**"""

df['Country'].value_counts()

df.columns

"""# **Calculating the dummy values of the columns with String dataset**"""

new_r = pd.get_dummies(df['Region'], dtype = int)
region = pd.DataFrame(new_r)
new_c = pd.get_dummies(df['Country'], dtype = int)
country = pd.DataFrame(new_c)

region = region.replace({'True':1, 'False':0})

region

country

"""# **Finding the dummy values for the sales channel**"""

new_Channel = pd.get_dummies(df['Sales Channel'], dtype = int)
Channel = pd.DataFrame(new_Channel)

Channel.head(5)

"""# **Finding the dummy values for the Item Type**"""

new_item = pd.get_dummies(df['Item Type'], dtype = int)
Item = pd.DataFrame(new_item)

Item

"""# **Finding the dummy values for the Order Priority**"""

new_Priority = pd.get_dummies(df['Order Priority'], dtype = int)
Priority = pd.DataFrame(new_Priority)

Priority

new_Date = pd.get_dummies(df['Ship Date'], dtype = int)
Date = pd.DataFrame(new_Date)
new_Date1 = pd.get_dummies(df['Order Date'], dtype = int)
Date1 = pd.DataFrame(new_Date1)

Date

Date1

"""# **Concatenating the new calculated values with the original dataframe**"""

new_df = pd.concat([region, country, Channel, Item, Priority, Date1, Date, df], axis = 1)

new_df

"""# **Dropping columns from the dataframe**"""

new_df = new_df.drop({'Region', 'Country', 'Sales Channel', 'Order Date', 'Item Type', 'Ship Date', 'Order Priority'}, axis = 1)

new_df.head(5)

"""# **Selecting the predictor the target variable**"""

X = new_df.drop('Total Profit', axis = 1)
y = new_df[['Total Profit']]

"""# **Printing the shape of the predictor and target variable**"""

print(X.shape)
print(y.shape)

"""# **Scaling the dataset**"""

Scaler = MinMaxScaler()
X_scaled = Scaler.fit_transform(X)
y_scaled = Scaler.fit_transform(y)

"""# **Splitting the dataset into train and test**"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.2)

"""# **Printing the shape of the splitted dataset**"""

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

"""# **Summary of the model**"""

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(units = 128, activation = 'linear', input_shape = (308,)))
model.add(tf.keras.layers.Dense(units = 64, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 64, activation = 'relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(units = 16, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 16, activation = 'relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(units = 8, activation = 'relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(units = 4, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 1, activation  = 'linear'))
model.summary()

"""# **Plotting the model**"""

keras.utils.plot_model(model, to_file='png', show_shapes=True)

"""# **Compiling the model**"""

model.compile(optimizer = 'Adam', loss = 'mean_squared_error')
from keras.callbacks import EarlyStopping
es = EarlyStopping(patience = 2, monitor = 'val_loss')
model.fit(X_train, y_train, epochs = 25, batch_size = 10, validation_data = (X_test, y_test), callbacks = [es])

"""# **Plotting the training history of the model**"""

hist = model.history.history
h = pd.DataFrame(hist)
h.plot()

"""# **Prediction by the model**"""

y_predict = model.predict(X_test)
  y_predict

"""# **Scatterplot between y_test and y_predict variable**"""

plt.plot(y_test,y_predict, '^', color = 'r')
plt.xlabel('y_test')
plt.ylabel('y_predict')

"""# **Scatterplot of true values and model predictions**"""

y_predict_original = Scaler.inverse_transform(y_predict)
y_test_original = Scaler.inverse_transform(y_test)
plt.plot(y_test_original,y_predict_original,'^',color = 'b')
plt.xlabel('model_predictions')
plt.ylabel('true_values')

"""# **Calculation of n**"""

k = X_test.shape
k
n = len(X_test)
n

"""# **Root Mean Squared Error Calculation**"""

from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
from math import sqrt
RMSE = float(format(np.sqrt(mean_squared_error(y_test_original,y_predict_original)), '0.3f'))
print(RMSE)

"""# **Mean Squared Error calculation**"""

MSE = mean_squared_error(y_test_original,y_predict_original)
print(MSE)

"""# **Mean Absolute Error calculation**"""

MAE = mean_absolute_error(y_test_original,y_predict_original)
print(MAE)

"""# **Calculation of R2 Score**"""

r2 = r2_score(y_test_original,y_predict_original)
print(r2)

"""# **Saving the model**"""

model.save("Predictor.h5")

"""# **The score of the ANN model is not upto the mark hence I have included the Linear Regression model also**"""

from sklearn.linear_model import LinearRegression
model1 = LinearRegression()
model1.fit(X_train, y_train)
model1.score(X_test, y_test)

"""# **Prediction of values**"""

y_predict = model1.predict(X_test)
y_predict

"""# **Plotting the predicted values**"""

plt.plot(y_test,y_predict, '^', color = 'r')
plt.xlabel('y_test')
plt.ylabel('y_predict')

"""# **Plotting the true predictions**"""

y_predict_original = Scaler.inverse_transform(y_predict)
y_test_original = Scaler.inverse_transform(y_test)
plt.plot(y_test_original,y_predict_original,'^',color = 'b')
plt.xlabel('model_predictions')
plt.ylabel('true_values')

"""# **Mean Squared Error calculation**"""

MSE = mean_squared_error(y_test_original,y_predict_original)
print(MSE)

"""# **Mean Absolute Error calculation**"""

MAE = mean_absolute_error(y_test_original,y_predict_original)
print(MAE)

"""# **Calculation of R2 Score**"""

r2 = r2_score(y_test_original,y_predict_original)
print(r2 * 100)